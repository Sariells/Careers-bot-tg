import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.database import CareerDB
from config import API_TOKEN, DB_NAME, QUESTIONS, CAREERS

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

db = CareerDB(DB_NAME) 

@dp.message(Command("start"))
async def start_test(message: types.Message):
    user_id = message.from_user.id
    db.save_user_session(user_id, tags=[], current=0)

    await message.answer(
        "üéØ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É.\n"
        "–û—Ç–≤–µ—á–∞–π –Ω–∞ –ø–∞—Ä—É –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∏ —É–∑–Ω–∞–µ—à—å, –∫–µ–º —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å! "
    )
    await send_question(user_id)

async def send_question(user_id: int):
    session = db.get_user_session(user_id)
    if session is None:
        session = {"tags": [], "current": 0}
        db.save_user_session(user_id, session["tags"], session["current"])

    index = session["current"]
    if index >= len(QUESTIONS):
        db.save_user_session(user_id, session["tags"], session["current"]) 
        careers = db.get_best_careers(user_id)

        if careers:
            result = "üéØ –¢–µ–±–µ –º–æ–≥—É—Ç –ø–æ–¥–æ–π—Ç–∏:\n\n"
            for name, desc in careers:
                result += f"üîπ <b>{name}</b>\n{desc}\n\n"
        else:
            result = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç—ã."

        await bot.send_message(user_id, result, parse_mode='HTML')
        db.clear_user_session(user_id)
        return

    q = QUESTIONS[index]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option["text"], callback_data=option["text"])]
            for option in q["options"]
        ]
    )

    await bot.send_message(user_id, f"üß† {q['text']}", reply_markup=keyboard)

@dp.callback_query()
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    session = db.get_user_session(user_id)
    if not session:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ /start")
        return

    current_q = session["current"]
    if current_q >= len(QUESTIONS):
        await callback.answer("–¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω")
        return

    q = QUESTIONS[current_q]

    for option in q["options"]:
        if option["text"] == callback.data:
            session["tags"].extend(option["tags"])

    session["current"] += 1
    db.save_user_session(user_id, session["tags"], session["current"])

    await callback.answer("‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç")
    await send_question(user_id)

async def main():
    db.load_careers(CAREERS)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
